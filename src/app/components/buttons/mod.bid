use std::{
    logs::log_std,
    web::{
        subscribe::Sub, 
        command::Cmd,
        component::Component
    },
    common::{
        default::Default,
        from::From
    }
};

pub struct BtnModel {
    pub title: str
}

pub enum BtnMsg {
    None,
    OnClick
}

pub struct BtnProps;

pub struct Btn;

impl Component for Btn {
    type Model: BtnModel;
    type Msg: BtnMsg;
    type Props: BtnProps;

    fn view(model: Self::Model, props: Self::Props) -> Html {
        html!(
            <button>
                {model.title}
            </button>
        )
    }

    fn update(model: Self::Model, msg: Self::MSG) -> Cmd<elf::Model, Self::MSG> {
        match msg {
            BtnMsg::OnClick => {
               Cmd::Some((model, BtnMsg::None)) 
            },
            _ => Cmd::Some((model, BtnMsg::None)),
        }
    }

    fn subscribe(model: Self::Model) -> Sub<MSG> {

        Sub::None
    }
}